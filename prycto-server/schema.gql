# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Exchange {
  _id: ID!
  exchange: String!
  name: String!
  publicKey: String!
  secretKey: String!
  address: String!
  balance: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type User {
  _id: ID!
  email: String!
  tokens: [String!]!
  password: String!
  createdAt: Float!
  lang: String!
}

type Cours {
  _id: ID!
  symbol: String!
  exchangeId: String!
  timestamp: Float!
  open: Float!
  hight: Float!
  low: Float!
  close: Float!
  volume: Float!
}

type Predict {
  _id: ID!
  up: Float!
  pair: String!
  down: Float!
  predictDate: Float!
  verified: Boolean!
}

type Position {
  _id: ID!
  pair: String!
  investment: Float!
  exchangeId: String!
  exchange: String!
  objectif: Float
  available: Float
  locked: Float
  address: String
  balance: JSON!
  predict: Predict!
}

type Pair {
  symbol: String!
}

type History {
  symbol: String!
  exchangeId: String!
  timestamp: Float!
  type: String!
  side: String!
  price: Float!
  amount: Float!
  cost: Float!
  average: Float!
  filled: Float!
  remaining: Float!
  status: String!
}

type Query {
  exchangeById(_id: String!): Exchange!
  exchanges: [Exchange!]!
  user: User!
  positions(exchangeId: ID!): [Position!]!
  position(_id: String!): Position!
  getHistoryBySymbol(limit: Int = 7, symbol: String!): [Cours!]!
  getMarkets(exchangeId: String!): JSON!
  getPairs: [Pair!]!
  getHistoryOrderBySymbol(positionId: String!, symbol: String!): [History!]!
}

type Mutation {
  addExchange(name: String!, address: String!, exchange: String!, publicKey: String!, secretKey: String!): Exchange!
  removeExchange(_id: String!): Boolean!
  updateExchange(balance: JSON!, _id: ID!): Exchange!
  login(password: String!, email: String!): String!
  register(confirmPassword: String!, password: String!, email: String!): Boolean!
  updateUser(email: String!, _id: ID!): User!
  updatePassword(confirmPassword: String!, password: String!, oldPassword: String!): User!
  logout(confirmPassword: String!, password: String!, email: String!): Boolean!
  updateLang(lang: String!): User!
  removePosition(_id: String!): Boolean!
  editPosition(investment: Float!, objectif: Float!, _id: String!): Position!
  syncPositions(_id: String!): Position!
  addPosition(symbol: String!): Position!
}

type Subscription {
  marketHit(exchangeId: String!): JSON!
}
